// Code generated by mockery v1.0.0. DO NOT EDIT.

package testutil

import (
	plugin "github.com/bluemedora/bplogagent/plugin"
	mock "github.com/stretchr/testify/mock"
)

// Outputter is an autogenerated mock type for the Outputter type
type Outputter struct {
	mock.Mock
}

// ID provides a mock function with given fields:
func (_m *Outputter) ID() plugin.PluginID {
	ret := _m.Called()

	var r0 plugin.PluginID
	if rf, ok := ret.Get(0).(func() plugin.PluginID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(plugin.PluginID)
	}

	return r0
}

// Outputs provides a mock function with given fields:
func (_m *Outputter) Outputs() []plugin.Inputter {
	ret := _m.Called()

	var r0 []plugin.Inputter
	if rf, ok := ret.Get(0).(func() []plugin.Inputter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]plugin.Inputter)
		}
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *Outputter) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *Outputter) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Type provides a mock function with given fields:
func (_m *Outputter) Type() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
